version: '3.7'
services:
    mysql:
        image: mysql:8.0.36
        container_name: "mysql"
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: root123
        ports:
            - "3306:3306"
        volumes:
            - ./db/mysql:/var/lib/mysql
            - ./etc/mysql:/etc/mysql/conf.d
        networks:
            - docker_webstack
    # mysql5.6:
    #     image: mysql:5.6
    #     container_name: "mysql5.6"
    #     restart: always
    #     environment:
    #         MYSQL_ROOT_PASSWORD: root123
    #     ports:
    #         - "3305:3306"
    #     volumes:
    #         - ./db/mysql5.6:/var/lib/mysql
    #         - ./etc/mysql5.6:/etc/mysql/conf.d
    #     networks:
    #         - docker_webstack
    mssql:
        image: mcr.microsoft.com/mssql/server
        container_name: "mssql"
        user: root
        restart: always
        ports:
            - "1433:1433"
        volumes:
            - "./db/mssql:/var/opt/mssql/data"
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=P@ssw0rd
            - MSSQL_AGENT_ENABLED=True
        networks:
            - docker_webstack
    mongodb:
        image: mongo
        container_name: "mongodb"
        ports:
            - '27017:27017'
        volumes:
            - "./db/mongodb:/data/db"
        environment:
            - MONGODB_INITDB_ROOT_USERNAME=root
            - MONGODB_INITDB_ROOT_PASSWORD=P@ssw0rd
        networks:
            - docker_webstack
    nginx:
        image: nginx:latest
        container_name: "nginx"
        ports:
            - "80:80"
            - "443:443"
            - "5173:5173"
        restart: always
        volumes:
            - "./etc/nginx/default.conf:/etc/nginx/conf.d/default.conf"
            - "./etc/ssl:/etc/ssl"
            - "./projects/:/var/www/projects"
        depends_on:
            - php8.fpm
            - mysql
            - mssql
            # - mailhog
        networks:
            - docker_webstack
    # nodejs:
    #     build: nodejs
    #     container_name: "nodejs"
    #     restart: on-failure
    #     command: npm run dev
    #     volumes:
    #         - "./projects/:/var/www/projects"
    #     networks:
    #         - docker_webstack
    # tika:
    #     image: logicalspark/docker-tikaserver
    #     container_name: "tika"
    #     ports:
    #         - 9998:9998
    #     volumes:
    #         - "./projects/:/var/www/projects"
    php8.fpm:
        build: php-stack-8-fpm
        container_name: "php8.fpm"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            # - "./etc/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    php8.1.fpm:
        build: php-stack-8.1-fpm
        container_name: "php8.1.fpm"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            # - "./etc/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    php8.2.fpm:
        build: php-stack-8.2-fpm
        container_name: "php8.2.fpm"
        ports:
            # untuk websocket
            - "8090:8090"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            # - "./etc/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    php7.fpm:
        build: php-stack-7-fpm
        container_name: "php7.fpm"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    php7.1.fpm:
        build: php-stack-7.1-fpm
        container_name: "php7.1.fpm"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    php5.6.fpm:
        build: php-stack-5.6.30-fpm
        container_name: "php5.6.fpm"
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            - "./projects/:/var/www/projects"
        networks:
            - docker_webstack
    # php7.3.fpm:
    #     build: php-stack-7.3-fpm
    #     container_name: "php7.3.fpm"
    #     restart: always
    #     volumes:
    #         - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
    #         - "./projects/:/var/www/projects"
    #     networks:
    #         - docker_webstack
    # mailhog:
    #     image: mailhog/mailhog
    #     container_name: "mailhog"
    #     restart: on-failure
    #     logging:
    #         driver: 'none' # disable saving logs
    #     volumes:
    #         - "./maildir/:/maildir"
    #     ports:
    #         - "1025:1025" # smtp server
    #         - "8025:8025" # web ui
    #     networks:
    #         - docker_webstack
    mailpit:
        image: axllent/mailpit
        container_name: "mailpit"
        restart: unless-stopped
        ports:
            - 8025:8025
            - 1025:1025
        networks:
            - docker_webstack
    redis:
        image: redis
        container_name: "redis"
        restart: always
        volumes:
            - ./db/redis:/data/db
        ports:
            - "6379:6379"
        networks:
            - docker_webstack
    # onlyoffice-documentserver:
    #     build:
    #         context: onlyoffice
    #     container_name: onlyoffice-documentserver
    #     depends_on:
    #         - onlyoffice-postgresql
    #         - onlyoffice-rabbitmq
    #     environment:
    #         - DB_TYPE=postgres
    #         - DB_HOST=onlyoffice-postgresql
    #         - DB_PORT=5432
    #         - DB_NAME=onlyoffice
    #         - DB_USER=onlyoffice
    #         - AMQP_URI=amqp://guest:guest@onlyoffice-rabbitmq
    #         # Uncomment strings below to enable the JSON Web Token validation.
    #         - JWT_ENABLED=true
    #         - JWT_SECRET=secret
    #         - JWT_HEADER=Authorization
    #         - JWT_IN_BODY=true
    #     ports:
    #         - '81:80'
    #         - '444:443'
    #     stdin_open: true
    #     restart: always
    #     stop_grace_period: 60s
    #     volumes:
    #         - /var/www/onlyoffice/Data
    #         - /var/log/onlyoffice
    #         - /var/lib/onlyoffice/documentserver/App_Data/cache/files
    #         - /var/www/onlyoffice/documentserver-example/public/files
    #         - /usr/share/fonts
    #         - "./projects/:/var/www/projects"
    #     networks:
    #         - docker_webstack
    # onlyoffice-rabbitmq:
    #     container_name: onlyoffice-rabbitmq
    #     image: rabbitmq
    #     restart: always
    #     expose:
    #         - '5672'
    #     networks:
    #         - docker_webstack
    # onlyoffice-postgresql:
    #     container_name: onlyoffice-postgresql
    #     image: postgres:12
    #     environment:
    #         - POSTGRES_DB=onlyoffice
    #         - POSTGRES_USER=onlyoffice
    #         - POSTGRES_HOST_AUTH_METHOD=trust
    #     restart: always
    #     expose:
    #         - '5432'
    #     volumes:
    #         - ./db/postgresql:/var/lib/postgresql
    #     networks:
    #         - docker_webstack
networks:
    docker_webstack:
        driver: bridge
